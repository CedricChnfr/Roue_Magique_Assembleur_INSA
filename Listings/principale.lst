


ARM Macro Assembler    Page 1 


    1 00000000         
    2 00000000         
    3 00000000         ;*******************************************************
                       *****************
    4 00000000                 THUMB
    5 00000000                 REQUIRE8
    6 00000000                 PRESERVE8
    7 00000000         ;*******************************************************
                       *****************
    8 00000000         
    9 00000000                 include          REG_UTILES.inc
    1 00000000         
    2 00000000         ;**************************************
    3 00000000         ;     Les adresess utiles  
    4 00000000         ;***************************************
    5 00000000         
    6 00000000         
    7 00000000         ;**************************************
    8 00000000         ;     Affectation des bits GPIO  
    9 00000000         ;***************************************
   10 00000000         ; GSLCK..... PA0 
   11 00000000         ; DSPRG..... PA1 
   12 00000000         ; BLANK..... PA2 
   13 00000000         ; XLAT...... PA3
   14 00000000         ; VPRG...... PA4
   15 00000000         ; SCLK...... PA5
   16 00000000         ; SIN1...... PA7
   17 00000000         ;Capteur.....PA8
   18 00000000         
   19 00000000         ;LED.........PB10
   20 00000000         ;****************************************/
   21 00000000         
   22 00000000         
   23 00000000         
   24 00000000 40010800 
                       GPIOBASEA
                               EQU              0X40010800
   25 00000000 40010C00 
                       GPIOBASEB
                               EQU              0X40010C00
   26 00000000         
   27 00000000 00000008 
                       OffsetInput
                               EQU              0x08
   28 00000000 0000000C 
                       OffsetOutput
                               EQU              0x0C
   29 00000000 00000010 
                       OffsetSet
                               EQU              0x10
   30 00000000 00000014 
                       OffsetReset
                               EQU              0x14
   31 00000000         
   32 00000000         
   33 00000000 00000080 
                       MaskSerial_In1
                               equ              0x80
   34 00000000 00000080 



ARM Macro Assembler    Page 2 


                       MaskSerial_Dots
                               equ              0x80
   35 00000000 00000010 
                       MaskVprg
                               equ              0x10
   36 00000000 00000008 
                       MaskXlat
                               equ              0x08
   37 00000000 00000004 
                       MaskBlank
                               equ              0x04
   38 00000000 00000020 
                       MaskSclk
                               equ              0x20
   39 00000000 00000002 
                       MaskDsprg
                               equ              0x02
   40 00000000 00000001 
                       MaskGsclk
                               equ              0x01
   41 00000000         
   42 00000000         
   43 00000000 E000ED08 
                       SCB_VTOR
                               EQU              0xE000ED08
   44 00000000 40012C10 
                       TIM1_SR EQU              0x40012c10
   45 00000000 40012C24 
                       TIM1_CNT
                               EQU              0x40012c24
   46 00000000 4000082C 
                       TIM4_ARR
                               EQU              0x4000082C
   47 00000000 40000810 
                       TIM4_SR EQU              0x40000810
   48 00000000         
   49 00000000         
   50 00000000         
   51 00000000         
   52 00000000         
   53 00000000                 END
   10 00000000         
   11 00000000         
   12 00000000         
   13 00000000         ;*******************************************************
                       *****************
   14 00000000         ;      IMPORT/EXPORT Syst?me
   15 00000000         ;*******************************************************
                       *****************
   16 00000000         
   17 00000000                 IMPORT           ||Lib$$Request$$armlib|| [CODE,
WEAK]
   18 00000000         
   19 00000000                 IMPORT           Allume_LED
   20 00000000                 IMPORT           Eteint_LED
   21 00000000         ;IMPORT Capteur
   22 00000000         
   23 00000000         
   24 00000000         ; IMPORT/EXPORT de proc?dure           



ARM Macro Assembler    Page 3 


   25 00000000         
   26 00000000                 IMPORT           Init_Cible
   27 00000000         
   28 00000000         
   29 00000000                 EXPORT           main
   30 00000000         
   31 00000000         ;*******************************************************
                       ************************
   32 00000000         
   33 00000000         
   34 00000000         ;*******************************************************
                       ************************
   35 00000000                 AREA             mesdonnees, data, readwrite
   36 00000000         
   37 00000000         
   38 00000000         
   39 00000000         
   40 00000000         ;*******************************************************
                       ************************
   41 00000000         
   42 00000000                 AREA             moncode, code, readonly
   43 00000000         
   44 00000000         
   45 00000000         
   46 00000000         ;*******************************************************
                       ************************
   47 00000000         ; Proc?dure principale et point d'entr?e du projet
   48 00000000         ;*******************************************************
                       ************************
   49 00000000         main    PROC
   50 00000000         ;*******************************************************
                       ************************
   51 00000000         
   52 00000000         
   53 00000000         
   54 00000000 F04F 0000       MOV              R0,#0
   55 00000004 F7FF FFFE       BL               Init_Cible  ;     ;Initialisati
                                                            on de la cible
   56 00000008         
   57 00000008         boucle
   58 00000008         
   59 00000008         ;Etat du capteur
   60 00000008 4C29            LDR              R4 ,= 0X40010808 ; Chargement d
                                                            e l'adresse dans le
                                                             registre
   61 0000000A F8B4 8000       LDRH             R8, [R4]    ; Stock la valeur d
                                                            e l'adresse de R4 d
                                                            ans R8
   62 0000000E         
   63 0000000E F04F 0900       MOV              R9, #0      ; Registre du compt
                                                            eur des 10 passages
                                                             initialisé à 0
   64 00000012 F04F 0A00       MOV              R10, #0     ; Registre OlEtat
   65 00000016         
   66 00000016 F408 7880       AND              R8,R8, #0x0100 ; Vérifier si le
                                                             bit 8 de l'adresse
                                                             chargée dans R5 es
                                                            t à 1 ou à 0.
   67 0000001A F1B8 0F00       CMP              R8, #0      ; Compare R8 à zéro



ARM Macro Assembler    Page 4 


                                                             OU CMP R8, #(0x01 
                                                            << 8)
   68 0000001E D100            BNE              front_montant_allume ; Si zero 
                                                            alors j'allume   
   69 00000020 E7F2            B                boucle
   70 00000022         
   71 00000022         front_montant_allume
   72 00000022         
   73 00000022 F109 0901       ADD              R9, R9, #1  ; Incrémentation du
                                                             compteur des 10 pa
                                                            ssages
   74 00000026 F1B9 0F0A       CMP              R9, #0x0A   ; Vérifier si le co
                                                            mpteur est à 10
   75 0000002A D03C            BEQ              Allume      ; Si oui, alors pas
                                                            ser à l'étape d'all
                                                            umage permanent de 
                                                            la LED
   76 0000002C         
   77 0000002C F7FF FFFE       BL               Allume_LED  ; Sinon, allume la 
                                                            LED
   78 00000030 F04F 0A01       MOV              R10, #1     ; Mettre à jour Old
                                                            Etat
   79 00000034         
   80 00000034         attente_allume
   81 00000034 F000 F813       BL               Old_Etat_allume ; Récupérer l'é
                                                            tat précédent du ca
                                                            pteur
   82 00000038         allume
   83 00000038 F1BA 0F00       CMP              R10, #0     ; Compare le regist
                                                            re R10 à 0
   84 0000003C D000            BEQ              front_montant_eteint ; Si oui r
                                                            etourne à l'étiquet
                                                            te front_montant_et
                                                            eint
   85 0000003E         
   86 0000003E E7F9            B                attente_allume ; Sinon continue
                                                            r l'étape d'allumag
                                                            e
   87 00000040         
   88 00000040         front_montant_eteint
   89 00000040         
   90 00000040 F109 0901       ADD              R9, R9, #1  ; Incrémentation du
                                                             compteur des 10 pa
                                                            ssages
   91 00000044 F1B9 0F0A       CMP              R9, #0x0A   ; Vérifier si le co
                                                            mpteur est à 10
   92 00000048 D02D            BEQ              Allume      ; Si oui, alors pas
                                                            ser à l'étape d'all
                                                            umage permanent de 
                                                            la LED
   93 0000004A         
   94 0000004A F7FF FFFE       BL               Eteint_LED  ; Sinon, éteindre l
                                                            a LED
   95 0000004E F04F 0A01       MOV              R10, #1     ; Mettre à jour Old
                                                            Etat
   96 00000052         
   97 00000052         attente_eteint
   98 00000052 F000 F816       BL               Old_Etat_eteint ; Récupérer l'é
                                                            tat précédent du ca



ARM Macro Assembler    Page 5 


                                                            pteur
   99 00000056         eteint
  100 00000056 F1BA 0F00       CMP              R10, #0     ; Compare le regist
                                                            re R10 à 0
  101 0000005A D0E2            BEQ              front_montant_allume ; Si oui r
                                                            etourne à l'étiquet
                                                            te front_montant_al
                                                            lume
  102 0000005C         
  103 0000005C E7F9            B                attente_eteint
  104 0000005E         
  105 0000005E         
  106 0000005E         Old_Etat_allume
  107 0000005E F04F 0A00       MOV              R10, #0     ; Initialisation à 
                                                            0 du registre OldEt
                                                            at
  108 00000062 F8B4 8000       LDRH             R8, [R4]    ; Charge la valeur 
                                                            stockée à l'adresse
                                                             R4 dans le registr
                                                            e R8
  109 00000066 F408 7880       AND              R8,R8, #0x0100 ; Effectue un ET
                                                             binaire entre R8 e
                                                            t 0x0100 et stocke 
                                                            le résultat dans R8
                                                            
  110 0000006A F1B8 0F00       CMP              R8, #0      ; Compare la valeur
                                                             stockée dans R8 à 
                                                            0
  111 0000006E D000            BEQ              Second_check_allume ; Saute à l
                                                            'étiquette allume2
  112 00000070 E7F5            B                Old_Etat_allume ; Sinon, retour
                                                            ne à l'étiquette Ol
                                                            d_Etat_allume
  113 00000072         Second_check_allume
  114 00000072 F8B4 8000       LDRH             R8, [R4]    ; Charge la valeur 
                                                            stockée à l'adresse
                                                             R4 dans le registr
                                                            e R8
  115 00000076 F408 7880       AND              R8,R8, #0x0100 ; Effectue un ET
                                                             binaire entre R8 e
                                                            t 0x0100 et stocke 
                                                            le résultat dans R8
                                                            
  116 0000007A F1B8 0F00       CMP              R8, #0      ; Compare la valeur
                                                             stockée dans R8 à 
                                                            0
  117 0000007E D1DB            BNE              allume      ; Saute à l'étiquet
                                                            te allume2
  118 00000080 E7F7            B                Second_check_allume ; Sinon, re
                                                            tourne à l'étiquett
                                                            e Old_Etat_allume
  119 00000082         
  120 00000082         Old_Etat_eteint
  121 00000082 F04F 0A00       MOV              R10, #0     ; Initialisation à 
                                                            0 du registre OldEt
                                                            at
  122 00000086 F8B4 8000       LDRH             R8, [R4]    ; Charge la valeur 
                                                            stockée à l'adresse
                                                             R4 dans le registr



ARM Macro Assembler    Page 6 


                                                            e R8
  123 0000008A F408 7880       AND              R8,R8, #0x0100 ; Effectue un ET
                                                             binaire entre R8 e
                                                            t 0x0100 et stocke 
                                                            le résultat dans R8
                                                            
  124 0000008E F1B8 0F00       CMP              R8, #0      ; Compare la valeur
                                                             stockée dans R8 à 
                                                            0
  125 00000092 D000            BEQ              Second_check_eteint ; Si la com
                                                            paraison n'est pas 
                                                            égale, saute à l'ét
                                                            iquette eteint2
  126 00000094 E7F5            B                Old_Etat_eteint ; Sinon, retour
                                                            ne à l'étiquette Ol
                                                            d_Etat_eteint
  127 00000096         Second_check_eteint
  128 00000096 F8B4 8000       LDRH             R8, [R4]    ; Charge la valeur 
                                                            stockée à l'adresse
                                                             R4 dans le registr
                                                            e R8
  129 0000009A F408 7880       AND              R8,R8, #0x0100 ; Effectue un ET
                                                             binaire entre R8 e
                                                            t 0x0100 et stocke 
                                                            le résultat dans R8
                                                            
  130 0000009E F1B8 0F00       CMP              R8, #0      ; Compare la valeur
                                                             stockée dans R8 à 
                                                            0
  131 000000A2 D1D8            BNE              eteint      ; Saute à l'étiquet
                                                            te allume2
  132 000000A4 E7F7            B                Second_check_eteint ; Sinon, re
                                                            tourne à l'étiquett
                                                            e Old_Etat_allume
  133 000000A6         
  134 000000A6         
  135 000000A6         
  136 000000A6         boucle2
  137 000000A6         Allume
  138 000000A6 F7FF FFFE       BL               Allume_LED
  139 000000AA E7FC            B                boucle2
  140 000000AC         
  141 000000AC         
  142 000000AC E7FE            B                .           ; boucle inifinie t
                                                            erminale...
  143 000000AE         
  144 000000AE                 ENDP
  145 000000AE         
  146 000000AE                 END
              00 00 40010808 
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M3 --depe
nd=.\objects\principale.d -o.\objects\principale.o -I.\RTE\Device\STM32F103RB -
I.\RTE\_Simul_ -IC:\Users\cedri\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\C
ore\Include -IC:\Users\cedri\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.4.0\D
evice\Include --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --pre
define="__UVISION_VERSION SETA 538" --predefine="_RTE_ SETA 1" --predefine="STM
32F10X_MD SETA 1" --predefine="_RTE_ SETA 1" --predefine="STM32F10X_MD SETA 1" 
--list=.\listings\principale.lst Principale.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

mesdonnees 00000000

Symbol: mesdonnees
   Definitions
      At line 35 in file Principale.asm
   Uses
      None
Comment: mesdonnees unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Allume 000000A6

Symbol: Allume
   Definitions
      At line 137 in file Principale.asm
   Uses
      At line 75 in file Principale.asm
      At line 92 in file Principale.asm

Old_Etat_allume 0000005E

Symbol: Old_Etat_allume
   Definitions
      At line 106 in file Principale.asm
   Uses
      At line 81 in file Principale.asm
      At line 112 in file Principale.asm

Old_Etat_eteint 00000082

Symbol: Old_Etat_eteint
   Definitions
      At line 120 in file Principale.asm
   Uses
      At line 98 in file Principale.asm
      At line 126 in file Principale.asm

Second_check_allume 00000072

Symbol: Second_check_allume
   Definitions
      At line 113 in file Principale.asm
   Uses
      At line 111 in file Principale.asm
      At line 118 in file Principale.asm

Second_check_eteint 00000096

Symbol: Second_check_eteint
   Definitions
      At line 127 in file Principale.asm
   Uses
      At line 125 in file Principale.asm
      At line 132 in file Principale.asm

allume 00000038

Symbol: allume
   Definitions
      At line 82 in file Principale.asm
   Uses
      At line 117 in file Principale.asm
Comment: allume used once
attente_allume 00000034

Symbol: attente_allume
   Definitions
      At line 80 in file Principale.asm
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 86 in file Principale.asm
Comment: attente_allume used once
attente_eteint 00000052

Symbol: attente_eteint
   Definitions
      At line 97 in file Principale.asm
   Uses
      At line 103 in file Principale.asm
Comment: attente_eteint used once
boucle 00000008

Symbol: boucle
   Definitions
      At line 57 in file Principale.asm
   Uses
      At line 69 in file Principale.asm
Comment: boucle used once
boucle2 000000A6

Symbol: boucle2
   Definitions
      At line 136 in file Principale.asm
   Uses
      At line 139 in file Principale.asm
Comment: boucle2 used once
eteint 00000056

Symbol: eteint
   Definitions
      At line 99 in file Principale.asm
   Uses
      At line 131 in file Principale.asm
Comment: eteint used once
front_montant_allume 00000022

Symbol: front_montant_allume
   Definitions
      At line 71 in file Principale.asm
   Uses
      At line 68 in file Principale.asm
      At line 101 in file Principale.asm

front_montant_eteint 00000040

Symbol: front_montant_eteint
   Definitions
      At line 88 in file Principale.asm
   Uses
      At line 84 in file Principale.asm
Comment: front_montant_eteint used once
main 00000000

Symbol: main
   Definitions
      At line 49 in file Principale.asm
   Uses
      At line 29 in file Principale.asm
Comment: main used once



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

moncode 00000000

Symbol: moncode
   Definitions
      At line 42 in file Principale.asm
   Uses
      None
Comment: moncode unused
15 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIOBASEA 40010800

Symbol: GPIOBASEA
   Definitions
      At line 24 in file REG_UTILES.inc
   Uses
      None
Comment: GPIOBASEA unused
GPIOBASEB 40010C00

Symbol: GPIOBASEB
   Definitions
      At line 25 in file REG_UTILES.inc
   Uses
      None
Comment: GPIOBASEB unused
MaskBlank 00000004

Symbol: MaskBlank
   Definitions
      At line 37 in file REG_UTILES.inc
   Uses
      None
Comment: MaskBlank unused
MaskDsprg 00000002

Symbol: MaskDsprg
   Definitions
      At line 39 in file REG_UTILES.inc
   Uses
      None
Comment: MaskDsprg unused
MaskGsclk 00000001

Symbol: MaskGsclk
   Definitions
      At line 40 in file REG_UTILES.inc
   Uses
      None
Comment: MaskGsclk unused
MaskSclk 00000020

Symbol: MaskSclk
   Definitions
      At line 38 in file REG_UTILES.inc
   Uses
      None
Comment: MaskSclk unused
MaskSerial_Dots 00000080

Symbol: MaskSerial_Dots
   Definitions
      At line 34 in file REG_UTILES.inc
   Uses
      None
Comment: MaskSerial_Dots unused
MaskSerial_In1 00000080

Symbol: MaskSerial_In1



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 33 in file REG_UTILES.inc
   Uses
      None
Comment: MaskSerial_In1 unused
MaskVprg 00000010

Symbol: MaskVprg
   Definitions
      At line 35 in file REG_UTILES.inc
   Uses
      None
Comment: MaskVprg unused
MaskXlat 00000008

Symbol: MaskXlat
   Definitions
      At line 36 in file REG_UTILES.inc
   Uses
      None
Comment: MaskXlat unused
OffsetInput 00000008

Symbol: OffsetInput
   Definitions
      At line 27 in file REG_UTILES.inc
   Uses
      None
Comment: OffsetInput unused
OffsetOutput 0000000C

Symbol: OffsetOutput
   Definitions
      At line 28 in file REG_UTILES.inc
   Uses
      None
Comment: OffsetOutput unused
OffsetReset 00000014

Symbol: OffsetReset
   Definitions
      At line 30 in file REG_UTILES.inc
   Uses
      None
Comment: OffsetReset unused
OffsetSet 00000010

Symbol: OffsetSet
   Definitions
      At line 29 in file REG_UTILES.inc
   Uses
      None
Comment: OffsetSet unused
SCB_VTOR E000ED08

Symbol: SCB_VTOR
   Definitions
      At line 43 in file REG_UTILES.inc
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      None
Comment: SCB_VTOR unused
TIM1_CNT 40012C24

Symbol: TIM1_CNT
   Definitions
      At line 45 in file REG_UTILES.inc
   Uses
      None
Comment: TIM1_CNT unused
TIM1_SR 40012C10

Symbol: TIM1_SR
   Definitions
      At line 44 in file REG_UTILES.inc
   Uses
      None
Comment: TIM1_SR unused
TIM4_ARR 4000082C

Symbol: TIM4_ARR
   Definitions
      At line 46 in file REG_UTILES.inc
   Uses
      None
Comment: TIM4_ARR unused
TIM4_SR 40000810

Symbol: TIM4_SR
   Definitions
      At line 47 in file REG_UTILES.inc
   Uses
      None
Comment: TIM4_SR unused
19 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

Allume_LED 00000000

Symbol: Allume_LED
   Definitions
      At line 19 in file Principale.asm
   Uses
      At line 77 in file Principale.asm
      At line 138 in file Principale.asm

Eteint_LED 00000000

Symbol: Eteint_LED
   Definitions
      At line 20 in file Principale.asm
   Uses
      At line 94 in file Principale.asm
Comment: Eteint_LED used once
Init_Cible 00000000

Symbol: Init_Cible
   Definitions
      At line 26 in file Principale.asm
   Uses
      At line 55 in file Principale.asm
Comment: Init_Cible used once
|Lib$$Request$$armlib| 00000000

Symbol: |Lib$$Request$$armlib|
   Definitions
      At line 17 in file Principale.asm
   Uses
      None
Comment: |Lib$$Request$$armlib| unused
4 symbols
376 symbols in table
